// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package locations

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/gmtstephane/go-template/models"
	c "github.com/gmtstephane/go-template/views/components"
	"github.com/gmtstephane/go-template/views/components/icons"
	"github.com/gmtstephane/go-template/views/components/table"
	l "github.com/gmtstephane/go-template/views/layouts"
	"time"
)

type locationRenderer []models.Location

func (locs locationRenderer) Header() []table.HeaderLabel {
	return []table.HeaderLabel{
		c.Text("Nom"),
		c.Text("Région"),
		c.Text("Ville"),
		c.Text("ZipCode"),
		c.Text("Créé le"),
	}
}

func (locs locationRenderer) Body() (body [][]templ.Component) {
	for _, loc := range locs {
		body = append(body, []templ.Component{
			c.Text(loc.Name),
			c.Text(loc.State),
			c.Text(loc.City),
			c.Text(loc.Zipcode),
			c.Text(loc.CreatedAt.Format(time.DateTime)),
		},
		)
	}
	return body
}

func List(locs []models.Location) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			templ_7745c5c3_Err = l.Header(l.HeaderProps{
				Icon:        icons.Location(30),
				Name:        "Lieux",
				Description: "Liste des lieux enregistrés dans la base de données.",
				Actions: []c.ButtonComponent{
					c.Button("Nouveau").Link("/admin/locations/new")},
			}).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = table.Render(locationRenderer(locs)).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = l.Dashboard().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
