package form 

import "net/http"
import "fmt"

templ SubSection() {
	<fieldset>
		<div class="mt-6 space-y-6">
			<div class="flex items-center gap-x-3">
				<input id="push-everything" name="push-notifications" type="radio" class="h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600"/>
				<label for="push-everything" class="block text-sm font-medium leading-6 text-gray-900">Everything</label>
			</div>
			<div class="flex items-center gap-x-3">
				<input id="push-email" name="push-notifications" type="radio" class="h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600"/>
				<label for="push-email" class="block text-sm font-medium leading-6 text-gray-900">Same as email</label>
			</div>
			<div class="flex items-center gap-x-3">
				<input id="push-nothing" name="push-notifications" type="radio" class="h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600"/>
				<label for="push-nothing" class="block text-sm font-medium leading-6 text-gray-900">No push notifications</label>
			</div>
		</div>
	</fieldset>
}

templ EmptySection() {
	@Section("", "") {
		{ children... }
	}
}

templ Section(name , description string) {
	<div class=" border-gray-900/10">
		<h2 class="text-base font-semibold leading-7 text-gray-900">{ name }</h2>
		<p class="mt-1 text-sm leading-6 text-gray-600">{ description }</p>
		<div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
			{ children... }
			// <div class="sm:col-span-3">
			// 	<label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">First name</label>
			// 	<div class="mt-2">
			// 		<input type="text" name="first-name" id="first-name" autocomplete="given-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
			// 	</div>
			// </div>
			// <div class="sm:col-span-3">
			// 	<label for="last-name" class="block text-sm font-medium leading-6 text-gray-900">Last name</label>
			// 	<div class="mt-2">
			// 		<input type="text" name="last-name" id="last-name" autocomplete="family-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
			// 	</div>
			// </div>
			// <div class="sm:col-span-4">
			// 	<label for="email" class="block text-sm font-medium leading-6 text-gray-900">Email address</label>
			// 	<div class="mt-2">
			// 		<input id="email" name="email" type="email" autocomplete="email" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
			// 	</div>
			// </div>
			// <div class="sm:col-span-3">
			// 	<label for="country" class="block text-sm font-medium leading-6 text-gray-900">Country</label>
			// 	<div class="mt-2">
			// 		<select id="country" name="country" autocomplete="country-name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6">
			// 			<option>United States</option>
			// 			<option>Canada</option>
			// 			<option>Mexico</option>
			// 		</select>
			// 	</div>
			// </div>
			// <div class="col-span-full">
			// 	<label for="street-address" class="block text-sm font-medium leading-6 text-gray-900">Street address</label>
			// 	<div class="mt-2">
			// 		<input type="text" name="street-address" id="street-address" autocomplete="street-address" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
			// 	</div>
			// </div>
			// <div class="sm:col-span-2 sm:col-start-1">
			// 	<label for="city" class="block text-sm font-medium leading-6 text-gray-900">City</label>
			// 	<div class="mt-2">
			// 		<input type="text" name="city" id="city" autocomplete="address-level2" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
			// 	</div>
			// </div>
			// <div class="sm:col-span-2">
			// 	<label for="region" class="block text-sm font-medium leading-6 text-gray-900">State / Province</label>
			// 	<div class="mt-2">
			// 		<input type="text" name="region" id="region" autocomplete="address-level1" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
			// 	</div>
			// </div>
			// <div class="sm:col-span-2">
			// 	<label for="postal-code" class="block text-sm font-medium leading-6 text-gray-900">ZIP / Postal code</label>
			// 	<div class="mt-2">
			// 		<input type="text" name="postal-code" id="postal-code" autocomplete="postal-code" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"/>
			// 	</div>
			// </div>
		</div>
	</div>
}

type FormHandler struct {
	method string

	//filterMode doesnt show bottom section with buttons as the filter is dynamic
	filterMode bool
}

func Form() FormHandler {
	return FormHandler{
		method:     "hx-post",
		filterMode: false,
	}
}

// FilterMode will not show the bottom section with buttons
func (f FormHandler) FilterMode() FormHandler {
	f.filterMode = true
	return f
}

func (f FormHandler) WithMethod(method string) FormHandler {

	switch method {
	case http.MethodGet:
		f.method = "hx-get"
	case http.MethodPost:
		f.method = "hx-post"
	case http.MethodPut:
		f.method = "hx-put"
	case http.MethodDelete:
		f.method = "hx-delete"
	}

	return f
}

func (f FormHandler) Render(ctx context.Context, w io.Writer) error {
	return f.render(templ.Attributes{
		f.method:      true,
		"hx-encoding": "multipart/form-data",
	}).Render(ctx, w)
}

templ (f FormHandler)render( attrs templ.Attributes) {
	<form
		if f.filterMode {
			hx-get
			hx-push-url="false"
			hx-trigger="keyup delay:100ms"
			hx-include="this"
			hx-target={ fmt.Sprintf("#%s", "table") }
			id="filter-section"
		}
		{ attrs... }
	>
		<div class="space-y-12">
			{ children... }
		</div>
		if !f.filterMode {
			<div class="mt-6 flex items-center justify-end gap-x-6">
				// <button type="button" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
				<button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save</button>
			</div>
		}
	</form>
}
